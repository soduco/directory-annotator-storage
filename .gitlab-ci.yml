# Global --------------------------

variables:
  PIP_CACHE_DIR: "${CI_PROJECT_DIR}/.cache/pip"

stages:
  - quality
  - tests
  - package
  - publish

default:
  cache:
    paths:
      - .cache/pip

# Jobs templates ------------------

.install-tox-template:
  before_script:
    - pip install tox

.quality-template:
  extends: .install-tox-template
  stage: quality
  image: python:3.8-slim
  script: 
    - mkdir -p .logs
    - tox -e lint  2>&1 | tee .logs/lint-tox.log
  artifacts:
    expose_as: 'Lint logs'
    paths:
      - .logs/lint-tox.log
    when: always
    expire_in: 1 week

.test-template:
  extends: .install-tox-template
  stage: tests
  image: python:3.8-slim
  coverage: '/TOTAL.*\s(\d+\.\d+\%)/'
  script: 
    - mkdir -p .logs
    - tox --result-json .logs/tests-tox.json 2>&1 | tee .logs/tests-tox.log
  artifacts:
    expose_as: 'Test logs'
    paths:
      - .logs/tests-tox.json
      - .logs/tests-tox.log
    when: always
    expire_in: 1 week

# Quality jobs ----------------------

quality:python3.8:
  extends: .quality-template
  timeout: 5 minutes


# Tests jobs ------------------------

test:python3.7:
  extends: .test-template
  image: python:3.7-slim
  timeout: 10 minutes
  allow_failure: true

test:python3.8:
  extends: .test-template
  image: python:3.8-slim
  timeout: 10 minutes

# test:python3.9:
#   extends: .test-template
#   image: python:3.9-slim
#   timeout: 10 minutes


# Package jobs ------------------------
package:python3.8:
  stage: package
  image: python:3.8-slim
  script:
    # We create a build version here to avoid conflicts during deployment
    # We may not want to accept near-duplicates and disable thisâ€¦
    - sed -i -E 's/^version\s*=\s*"(.+)"\s*$/version = "\1.'$CI_PIPELINE_IID'"/i' pyproject.toml
    - grep -E "^version\s*=" pyproject.toml
    - pip3 wheel -w dist/ --use-pep517 --no-deps --isolated .
  artifacts:
    expose_as: 'Autogenerated packages'
    paths:
      - dist/
    expire_in: 1 hour
  timeout: 5 minutes

# Publish jobs ------------------------
publish:python3.8-package:
  stage: publish
  image: python:3.8-slim
  variables:
    TWINE_USERNAME: gitlab-ci-token
    TWINE_PASSWORD: ${CI_JOB_TOKEN}
    TWINE_REPOSITORY_URL: https://gitlab.lre.epita.fr/api/v4/projects/${CI_PROJECT_ID}/packages/pypi
    TWINE_NON_INTERACTIVE: 'True'
  before_script:
    - pip install twine
  dependencies:
    - package:python3.8
  script:
    # This fails if any file already exists (--skip-existing is not supported in Gitlab's PyPI registry)
    # - python -m twine upload --verbose --skip-existing dist/*
    - python -m twine upload --verbose dist/directory_annotator_storage-*.whl
  only:
      - main
#     - tags
  timeout: 5 minutes

publish:python3.8-dockerimage:
  stage: publish
  image: docker:20
  services:
    - docker:20-dind
  before_script:
    - echo "Docker info --------------------"
    - docker info
  dependencies: ["test:python3.8"]
  script:
    - echo "Image info --------------------"
    - echo "${CI_JOB_IMAGE}"
    - echo "Platform info --------------------"
    - uname -a || echo ERR
    - lsb_release -a || echo ERR
    - cat /etc/debian_version || echo ERR
    - cat /etc/*-release || echo ERR
    - hostnamectl || echo ERR
    - cat /proc/version || echo ERR
    - echo "Build docker image --------------------"
    - docker build . -t "${CI_REGISTRY}/${CI_PROJECT_PATH}/storageapp:build-${CI_PIPELINE_IID}" -t "${CI_REGISTRY}/${CI_PROJECT_PATH}/storageapp:latest" -f docker/deploy-debian-stable.dockerfile
    - echo "Push docker image --------------------"
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker push "${CI_REGISTRY}/${CI_PROJECT_PATH}/storageapp:build-${CI_PIPELINE_IID}"
    - docker push "${CI_REGISTRY}/${CI_PROJECT_PATH}/storageapp:latest"
  only: [ "main" ]  # ${CI_DEFAULT_BRANCH}
  timeout: 15 minutes
